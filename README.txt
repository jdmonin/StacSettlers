STACSettlers

This file contains a quickstart guide and a small set of sample usages. For a more detailed description of the project and of the Stac rule-based agent see "STACSettlers documentation.pdf" file. This project contains various implementations for the [Strategic Conversation (STAC)] project. It also contains the code (as local dependencies) for the agents developed in the following PhD thesis:
- Mihai Dobre, Low-resource Learning in Complex Games, School of Informatics, University of Edinburgh, 2018.
 
INSTALLATION

Most dependencies are contained in Maven's central repository. There is a set of local dependecies that need to be installed in the maven repository manually. To install them run the following commands, while updating the path to the jars:
mvn install:install-file -Dfile=<path-to-JavaBayes.jar> -DgroupId=local -DartifactId=JavaBayes -Dversion=1.0 -Dpackaging=jar -DgeneratePom=true 
mvn install:install-file -Dfile=<path-to-mdp-library.jar> -DgroupId=local -DartifactId=mdp-library -Dversion=1.0 -Dpackaging=jar -DgeneratePom=true 
mvn install:install-file -Dfile=<path-to-weka.jar> -DgroupId=local -DartifactId=weka -Dversion=1.0 -Dpackaging=jar -DgeneratePom=true 
mvn install:install-file -Dfile=<path-to-MCTS-1.0.jar> -DgroupId=local -DartifactId=MCTS -Dversion=1.0 -Dpackaging=jar -DgeneratePom=true 
mvn install:install-file -Dfile=<path-to-DeepCatan-0.0.1.jar> -DgroupId=local -DartifactId=DeepCatan -Dversion=0.0.1 -Dpackaging=jar -DgeneratePom=true 

Alternatively, use the install_local_library.sh and pass the corresponding parameters for each of the jars.

RUNNING SIMULATIONS

To run an example simulation between 4 Stac agents, build the jar, create a config.txt file with the following contents:
Games=1
Log=true
ChatNegotiation=true
~
TradesTest
Trades=true
Agent=4,Stac,stac,TRY_N_BEST_BUILD_PLANS:0|FAVOUR_DEV_CARDS:-5

and run the following command:
"java -cp STACSettlers-1.0-bin.jar soc.robot.stac.simulation.Simulation <config-file>"
This will run one game between 4 Stac heuristic agents with the best parameters. 
The config.txt file contained in the resources package has a set of example agents that can be run in the simulation environment. Note that smartsettlers and the TypedMCTS agents require FullyObservable=true!

REPLAY AND STORING GAMEPLAY
To replay the game run the following:
"java -cp STACSettlers-1.0-bin.jar soc.client.SOCReplayClient"
then click load file and select the log file generated by the simulation game.

The replay client can be used to collect the gameplay (excluding chat negotiations) into a postgresql database. The database schema is included in the database folder. The username, password and url to the database should be included in dbconfig.txt inside the resource folder. For instructions on how to use the replay client for storing the gameplay see the pdf document.
human.sql file is a dump of the database that contains the gameplay from the human corpus. The log files will be released by the STAC project (https://www.irit.fr/STAC/).

SERVER AND ONLINE GAMES
Running online games requires a mysql database; see javadocs for soc.server.database.SOCDBHelper.java on how to set up the db. Starting the server can be done via the following command:
java -cp STACSettlers-1.0-bin.jar soc.server.SOCServer -Dstac.robots={number of robots to start} portNumber max_connections dbUser dbPass

HOW TO RUN THE DEEP RL AGENT
Running this agent requires Node.js and the installation of the modules contained in web folder.

(1) Run the server (DRL agent):
    <YourPath>/java/web/main$ node runserver.js

    N.B. If you want to change the host and port of the remote server, open the file YourPath>/java/config.txt and edit the variables "TCPServer_*"

(2) Run the client (JSettlers):
    <YourPath>/java/$ scripts/run_simulation.sh config-drl.txt

    N.B. If you want to change the host and port of the remote server, edit the host+port in method "getTradeFromServer" of file YourPath>/java/src/soc/server/SOCServer.java and recompile

The output of the server should look like this:
*TCP Server for JSettlers*
libraries loaded!
config file loaded!
configurations defined!
brain created!
Initialised agent!
Loading policy ../../web/policies//simpleds-policy-0.json
Network initialised!
Running in test mode!
<Press ctrl+c to quit>
request 100
request 200
request 300
request 400
request 500
request 600
request 700
...

SCRIPTS
The scripts folder contains a set of example scripts for the most common usages. Note that the jar must be renamed to STACSettlers.jar from STACSettlers-1.0-bin.jar before running the scripts.

COPYRIGHT NOTICE

STACSettlers and Jsettlers are licensed under GNU General Public License version 3.
Below is the copyright notice for the STACSettlers part of the code and the license is included in LICENSE.txt.
The license for JSettlers project is included in src/resources/LICENSE.txt.
JavaBayes, mdp-library and weka jars contained in lib folder are also licensed under GPL v3.
MCTS-1.0 and DeepCatan-0.0.1 jars are licensed under the MIT license.

    STACSettlers - An extension to the JSettlers framework
    Copyright (C) 2017  STAC

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
    
    
[Strategic Conversation (STAC)]: https://www.irit.fr/STAC/index.html
    